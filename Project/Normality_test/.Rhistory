abline(h = 0.596, col='red', lwd=3)
abline(v = 202, col='Gold', lwd=2)
abline(v = 237, col='Gold', lwd=2)
plot(preds3$anomaly_score, col='blue', pch=16, main='Tool3')
abline(h = 0.6037, col='red', lwd=3)
abline(v = 191, col='Gold', lwd=2)
abline(v = 697, col='Gold', lwd=2)
plot(preds4$anomaly_score, col='blue', pch=16, main='Tool4')
abline(h = 0.608, col='red', lwd=3)
abline(v = 197, col='Gold', lwd=2)
abline(v = 482, col='Gold', lwd=2)
## confusion matrix
actual1 = test[test$TOOL_NAME == 'P8TCVD060306', 51]
predicted1 = preds1$anomaly_score
predicted1[predicted1>0.592] = "Abnormal"
predicted1[predicted1<=0.592] = "Normal"
confusion1 = confusionMatrix(as.factor(actual1), as.factor(predicted1))
actual2 = test[test$TOOL_NAME == 'P8TCVD060307', 51]
predicted2 = preds2$anomaly_score
predicted2[predicted2>0.596] = "Abnormal"
predicted2[predicted2<=0.596] = "Normal"
confusion2 = confusionMatrix(as.factor(actual2), as.factor(predicted2))
actual3 = test[test$TOOL_NAME == 'P8TCVD060308', 51]
predicted3 = preds3$anomaly_score
predicted3[predicted3>0.6037] = "Abnormal"
predicted3[predicted3<=0.6037] = "Normal"
confusion3 = confusionMatrix(as.factor(actual3), as.factor(predicted3))
actual4 = test[test$TOOL_NAME == 'P8TCVD060309', 51]
predicted4 = preds4$anomaly_score
predicted4[predicted4>0.608] = "Abnormal"
predicted4[predicted4<=0.608] = "Normal"
confusion4 = confusionMatrix(as.factor(actual4), as.factor(predicted4))
confusion1
confusion2
confusion3
confusion4
# 그래프
par(mfrow = c(2, 2))
plot(preds1$anomaly_score, col='blue', pch=16, main='Tool1')
abline(h = 0.592, col='red', lwd=3)
abline(v = 319, col='Gold', lwd=2)
abline(v = 479, col='Gold', lwd=2)
plot(preds2$anomaly_score, col='blue', pch=16, main='Tool2')
abline(h = 0.596, col='red', lwd=3)
abline(v = 202, col='Gold', lwd=2)
abline(v = 237, col='Gold', lwd=2)
plot(preds3$anomaly_score, col='blue', pch=16, main='Tool3')
abline(h = 0.6037, col='red', lwd=3)
abline(v = 191, col='Gold', lwd=2)
abline(v = 697, col='Gold', lwd=2)
plot(preds4$anomaly_score, col='blue', pch=16, main='Tool4')
abline(h = 0.608, col='red', lwd=3)
abline(v = 197, col='Gold', lwd=2)
abline(v = 482, col='Gold', lwd=2)
# training data로 학습
iforest1 = isolationForest$new(max_depth = 7,num_trees = 300, sample_size = 256)
iforest1$fit(train1)
iforest2 = isolationForest$new(max_depth = 7,num_trees = 300, sample_size = 256)
iforest2$fit(train2)
iforest3 = isolationForest$new(max_depth = 7,num_trees = 300, sample_size = 256)
iforest3$fit(train3)
iforest4 = isolationForest$new(max_depth = 7,num_trees = 300, sample_size = 256)
iforest4$fit(train4)
# 학습된 모델에 testing data 적용
preds1 = iforest1$predict(test1)
indices1 = preds1[which(preds1$anomaly_score > 0.592)]
preds2 = iforest2$predict(test2)
indices2 = preds2[which(preds2$anomaly_score > 0.596)]
preds3 = iforest3$predict(test3)
indices3 = preds3[which(preds3$anomaly_score > 0.6037)]
preds4 = iforest4$predict(test4)
indices4 = preds4[which(preds4$anomaly_score > 0.608)]
pred_normal1 = test1[indices1$id, ]
pred_abnormal1 = test1[-indices1$id, ]
pred_normal2 = test2[indices2$id, ]
pred_abnormal2 = test2[-indices2$id, ]
pred_normal3 = test3[indices3$id, ]
pred_abnormal3 = test3[-indices3$id, ]
pred_normal4 = test4[indices4$id, ]
pred_abnormal4 = test4[-indices4$id, ]
# 예측 결과
cat(nrow(pred_normal1), nrow(pred_abnormal1))
cat(nrow(pred_normal2), nrow(pred_abnormal2))
cat(nrow(pred_normal3), nrow(pred_abnormal3))
cat(nrow(pred_normal4), nrow(pred_abnormal4))
# 그래프
par(mfrow = c(2, 2))
plot(preds1$anomaly_score, col='blue', pch=16, main='Tool1')
abline(h = 0.592, col='red', lwd=3)
abline(v = 319, col='Gold', lwd=2)
abline(v = 479, col='Gold', lwd=2)
plot(preds2$anomaly_score, col='blue', pch=16, main='Tool2')
abline(h = 0.596, col='red', lwd=3)
abline(v = 202, col='Gold', lwd=2)
abline(v = 237, col='Gold', lwd=2)
plot(preds3$anomaly_score, col='blue', pch=16, main='Tool3')
abline(h = 0.6037, col='red', lwd=3)
abline(v = 191, col='Gold', lwd=2)
abline(v = 697, col='Gold', lwd=2)
plot(preds4$anomaly_score, col='blue', pch=16, main='Tool4')
abline(h = 0.608, col='red', lwd=3)
abline(v = 197, col='Gold', lwd=2)
abline(v = 482, col='Gold', lwd=2)
## confusion matrix
actual1 = test[test$TOOL_NAME == 'P8TCVD060306', 51]
predicted1 = preds1$anomaly_score
predicted1[predicted1>0.592] = "Abnormal"
predicted1[predicted1<=0.592] = "Normal"
confusion1 = confusionMatrix(as.factor(actual1), as.factor(predicted1))
actual2 = test[test$TOOL_NAME == 'P8TCVD060307', 51]
predicted2 = preds2$anomaly_score
predicted2[predicted2>0.596] = "Abnormal"
predicted2[predicted2<=0.596] = "Normal"
confusion2 = confusionMatrix(as.factor(actual2), as.factor(predicted2))
actual3 = test[test$TOOL_NAME == 'P8TCVD060308', 51]
predicted3 = preds3$anomaly_score
predicted3[predicted3>0.6037] = "Abnormal"
predicted3[predicted3<=0.6037] = "Normal"
confusion3 = confusionMatrix(as.factor(actual3), as.factor(predicted3))
actual4 = test[test$TOOL_NAME == 'P8TCVD060309', 51]
predicted4 = preds4$anomaly_score
predicted4[predicted4>0.608] = "Abnormal"
predicted4[predicted4<=0.608] = "Normal"
confusion4 = confusionMatrix(as.factor(actual4), as.factor(predicted4))
confusion1
confusion2
confusion3
confusion4
# training data로 학습
iforest1 = isolationForest$new(max_depth = 8,num_trees = 300, sample_size = 256)
iforest1$fit(train1)
iforest2 = isolationForest$new(max_depth = 8,num_trees = 300, sample_size = 256)
iforest2$fit(train2)
iforest3 = isolationForest$new(max_depth = 8,num_trees = 300, sample_size = 256)
iforest3$fit(train3)
iforest4 = isolationForest$new(max_depth = 8,num_trees = 300, sample_size = 256)
iforest4$fit(train4)
# 학습된 모델에 testing data 적용
preds1 = iforest1$predict(test1)
indices1 = preds1[which(preds1$anomaly_score > 0.592)]
preds2 = iforest2$predict(test2)
indices2 = preds2[which(preds2$anomaly_score > 0.596)]
preds3 = iforest3$predict(test3)
indices3 = preds3[which(preds3$anomaly_score > 0.6037)]
preds4 = iforest4$predict(test4)
indices4 = preds4[which(preds4$anomaly_score > 0.608)]
pred_normal1 = test1[indices1$id, ]
pred_abnormal1 = test1[-indices1$id, ]
pred_normal2 = test2[indices2$id, ]
pred_abnormal2 = test2[-indices2$id, ]
pred_normal3 = test3[indices3$id, ]
pred_abnormal3 = test3[-indices3$id, ]
pred_normal4 = test4[indices4$id, ]
pred_abnormal4 = test4[-indices4$id, ]
# 예측 결과
cat(nrow(pred_normal1), nrow(pred_abnormal1))
cat(nrow(pred_normal2), nrow(pred_abnormal2))
cat(nrow(pred_normal3), nrow(pred_abnormal3))
cat(nrow(pred_normal4), nrow(pred_abnormal4))
# 그래프
par(mfrow = c(2, 2))
plot(preds1$anomaly_score, col='blue', pch=16, main='Tool1')
abline(h = 0.592, col='red', lwd=3)
abline(v = 319, col='Gold', lwd=2)
abline(v = 479, col='Gold', lwd=2)
plot(preds2$anomaly_score, col='blue', pch=16, main='Tool2')
abline(h = 0.596, col='red', lwd=3)
abline(v = 202, col='Gold', lwd=2)
abline(v = 237, col='Gold', lwd=2)
plot(preds3$anomaly_score, col='blue', pch=16, main='Tool3')
abline(h = 0.6037, col='red', lwd=3)
abline(v = 191, col='Gold', lwd=2)
abline(v = 697, col='Gold', lwd=2)
plot(preds4$anomaly_score, col='blue', pch=16, main='Tool4')
abline(h = 0.608, col='red', lwd=3)
abline(v = 197, col='Gold', lwd=2)
abline(v = 482, col='Gold', lwd=2)
## confusion matrix
actual1 = test[test$TOOL_NAME == 'P8TCVD060306', 51]
predicted1 = preds1$anomaly_score
predicted1[predicted1>0.592] = "Abnormal"
predicted1[predicted1<=0.592] = "Normal"
confusion1 = confusionMatrix(as.factor(actual1), as.factor(predicted1))
actual2 = test[test$TOOL_NAME == 'P8TCVD060307', 51]
predicted2 = preds2$anomaly_score
predicted2[predicted2>0.596] = "Abnormal"
predicted2[predicted2<=0.596] = "Normal"
confusion2 = confusionMatrix(as.factor(actual2), as.factor(predicted2))
actual3 = test[test$TOOL_NAME == 'P8TCVD060308', 51]
predicted3 = preds3$anomaly_score
predicted3[predicted3>0.6037] = "Abnormal"
predicted3[predicted3<=0.6037] = "Normal"
confusion3 = confusionMatrix(as.factor(actual3), as.factor(predicted3))
actual4 = test[test$TOOL_NAME == 'P8TCVD060309', 51]
predicted4 = preds4$anomaly_score
predicted4[predicted4>0.608] = "Abnormal"
predicted4[predicted4<=0.608] = "Normal"
confusion4 = confusionMatrix(as.factor(actual4), as.factor(predicted4))
confusion1
confusion2
confusion3
confusion4
# training data로 학습
iforest1 = isolationForest$new(max_depth = 8,num_trees = 500, sample_size = 256)
iforest1$fit(train1)
iforest2 = isolationForest$new(max_depth = 8,num_trees = 500, sample_size = 256)
iforest2$fit(train2)
iforest3 = isolationForest$new(max_depth = 8,num_trees = 500, sample_size = 256)
iforest3$fit(train3)
iforest4 = isolationForest$new(max_depth = 8,num_trees = 500, sample_size = 256)
iforest4$fit(train4)
# 학습된 모델에 testing data 적용
preds1 = iforest1$predict(test1)
indices1 = preds1[which(preds1$anomaly_score > 0.592)]
preds2 = iforest2$predict(test2)
indices2 = preds2[which(preds2$anomaly_score > 0.596)]
preds3 = iforest3$predict(test3)
indices3 = preds3[which(preds3$anomaly_score > 0.6037)]
preds4 = iforest4$predict(test4)
indices4 = preds4[which(preds4$anomaly_score > 0.608)]
pred_normal1 = test1[indices1$id, ]
pred_abnormal1 = test1[-indices1$id, ]
pred_normal2 = test2[indices2$id, ]
pred_abnormal2 = test2[-indices2$id, ]
pred_normal3 = test3[indices3$id, ]
pred_abnormal3 = test3[-indices3$id, ]
pred_normal4 = test4[indices4$id, ]
pred_abnormal4 = test4[-indices4$id, ]
# 예측 결과
cat(nrow(pred_normal1), nrow(pred_abnormal1))
cat(nrow(pred_normal2), nrow(pred_abnormal2))
cat(nrow(pred_normal3), nrow(pred_abnormal3))
cat(nrow(pred_normal4), nrow(pred_abnormal4))
# 그래프
par(mfrow = c(2, 2))
plot(preds1$anomaly_score, col='blue', pch=16, main='Tool1')
abline(h = 0.592, col='red', lwd=3)
abline(v = 319, col='Gold', lwd=2)
abline(v = 479, col='Gold', lwd=2)
plot(preds2$anomaly_score, col='blue', pch=16, main='Tool2')
abline(h = 0.596, col='red', lwd=3)
abline(v = 202, col='Gold', lwd=2)
abline(v = 237, col='Gold', lwd=2)
plot(preds3$anomaly_score, col='blue', pch=16, main='Tool3')
abline(h = 0.6037, col='red', lwd=3)
abline(v = 191, col='Gold', lwd=2)
abline(v = 697, col='Gold', lwd=2)
plot(preds4$anomaly_score, col='blue', pch=16, main='Tool4')
abline(h = 0.608, col='red', lwd=3)
abline(v = 197, col='Gold', lwd=2)
abline(v = 482, col='Gold', lwd=2)
## confusion matrix
actual1 = test[test$TOOL_NAME == 'P8TCVD060306', 51]
predicted1 = preds1$anomaly_score
predicted1[predicted1>0.592] = "Abnormal"
predicted1[predicted1<=0.592] = "Normal"
confusion1 = confusionMatrix(as.factor(actual1), as.factor(predicted1))
actual2 = test[test$TOOL_NAME == 'P8TCVD060307', 51]
predicted2 = preds2$anomaly_score
predicted2[predicted2>0.596] = "Abnormal"
predicted2[predicted2<=0.596] = "Normal"
confusion2 = confusionMatrix(as.factor(actual2), as.factor(predicted2))
actual3 = test[test$TOOL_NAME == 'P8TCVD060308', 51]
predicted3 = preds3$anomaly_score
predicted3[predicted3>0.6037] = "Abnormal"
predicted3[predicted3<=0.6037] = "Normal"
confusion3 = confusionMatrix(as.factor(actual3), as.factor(predicted3))
actual4 = test[test$TOOL_NAME == 'P8TCVD060309', 51]
predicted4 = preds4$anomaly_score
predicted4[predicted4>0.608] = "Abnormal"
predicted4[predicted4<=0.608] = "Normal"
confusion4 = confusionMatrix(as.factor(actual4), as.factor(predicted4))
confusion1
confusion2
confusion3
confusion4
train = as.matrix(train)
test = as.matrix(test)
train_intercept = matrix(1, nrow(train), 1)
test_intercept = matrix(1, nrow(test), 1)
y_hat_tr = matrix(0, nrow(train), ncol(train))
for(i in 1:ncol(train)){
y_hat_tr[,i] = cbind(train_intercept, as.matrix(train[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i]))) %*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
train_intercept = matrix(1, nrow(train), 1)
test_intercept = matrix(1, nrow(test), 1)
y_hat_tr = matrix(0, nrow(train), ncol(train))
for(i in 1:ncol(train)){
y_hat_tr[,i] = cbind(train_intercept, as.matrix(train[,-i])) %*% ginv(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i]))) %*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
# ginv
library(MASS)
train_intercept = matrix(1, nrow(train), 1)
test_intercept = matrix(1, nrow(test), 1)
y_hat_tr = matrix(0, nrow(train), ncol(train))
for(i in 1:ncol(train)){
y_hat_tr[,i] = cbind(train_intercept, as.matrix(train[,-i])) %*% ginv(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i]))) %*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
train
ir = iris[,1:4]
train = ir[1:150]
train = ir[1:100,]
test = ir[1:150,]
train = as.matrix(train)
test = as.matrix(test)
train_intercept = matrix(1, nrow(train), 1)
test_intercept = matrix(1, nrow(test), 1)
y_hat_tr = matrix(0, nrow(train), ncol(train))
for(i in 1:ncol(train)){
y_hat_tr[,i] = cbind(train_intercept, as.matrix(train[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i]))) %*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
y_hat_ts = matrix(0, nrow(test), ncol(test))
for(i in 1:ncol(test)){
y_hat_ts[,i] = cbind(test_intercept, as.matrix(test[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i])))%*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
r
# residual mat
residual_tr_mat = train - y_hat_tr
residual_tr_mat
residual_ts_mat = test-y_hat_ts
residual_ts_mat
ret = list(residual_tr = residual_tr_mat, residual_ts = residual_ts_mat)
ret
y_hat_ts[,i] = cbind(test_intercept, as.matrix(test[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i])))%*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
y_hat_ts[,i]
ret = list(residual_tr = residual_tr_mat, residual_ts = residual_ts_mat)
ret
y_hat_tr
y_hat_ts
residual_tr_mat
residual_ts_mat
y_hat_tr
y_hat_tr[,i]
y_hat_ts
cbind(train_intercept, as.matrix(train[,-i]))
solve(t(cbind(train_intercept, as.matrix(train[,-i])))
solve(t(cbind(train_intercept, as.matrix(train[,-i])))
solve(t(cbind(train_intercept, as.matrix(train[,-i])))
cbind(train_intercept, as.matrix(train[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i])))
y_hat_tr[,i] = cbind(train_intercept, as.matrix(train[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i]))) %*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
y_hat_tr[,i]
ret = list(residual_tr = residual_tr_mat, residual_ts = residual_ts_mat)
ret
plot(ret$residual_ts[,1])
train = ir[1:50,]
test = ir[1:150,]
mset_regress <- function(train, test){
train = as.matrix(train)
test = as.matrix(test)
train_intercept = matrix(1, nrow(train), 1)
test_intercept = matrix(1, nrow(test), 1)
y_hat_tr = matrix(0, nrow(train), ncol(train))
for(i in 1:ncol(train)){
y_hat_tr[,i] = cbind(train_intercept, as.matrix(train[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i]))) %*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
y_hat_ts = matrix(0, nrow(test), ncol(test))
for(i in 1:ncol(test)){
y_hat_ts[,i] = cbind(test_intercept, as.matrix(test[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i])))%*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
# residual mat
residual_tr_mat = train - y_hat_tr
residual_ts_mat = test-y_hat_ts
ret = list(residual_tr = residual_tr_mat, residual_ts = residual_ts_mat)
return(ret)
}
plot(ret$residual_ts[,1])
train
test
mset_regress <- function(train, test){
train = as.matrix(train)
test = as.matrix(test)
train_intercept = matrix(1, nrow(train), 1)
test_intercept = matrix(1, nrow(test), 1)
y_hat_tr = matrix(0, nrow(train), ncol(train))
for(i in 1:ncol(train)){
y_hat_tr[,i] = cbind(train_intercept, as.matrix(train[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i]))) %*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
y_hat_ts = matrix(0, nrow(test), ncol(test))
for(i in 1:ncol(test)){
y_hat_ts[,i] = cbind(test_intercept, as.matrix(test[,-i])) %*% solve(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i])))%*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
# residual mat
residual_tr_mat = train - y_hat_tr
residual_ts_mat = test-y_hat_ts
ret = list(residual_tr = residual_tr_mat, residual_ts = residual_ts_mat)
return(ret)
}
ret
plot(ret$residual_ts[,1])
plot(ret$residual_ts[,2])
plot(ret$residual_ts[,3])
plot(ret$residual_ts[,4])
plot(ret$residual_ts[,1])
plot(ret$residual_ts[,2])
mset_regress <- function(train, test){
train_intercept = matrix(1, nrow(train), 1)
test_intercept = matrix(1, nrow(test), 1)
y_hat_tr = matrix(0, nrow(train), ncol(train))
for(i in 1:ncol(train)){
y_hat_tr[,i] = cbind(train_intercept, as.matrix(train[,-i])) %*% ginv(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i]))) %*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
y_hat_ts = matrix(0, nrow(test), ncol(test))
for(i in 1:ncol(test)){
y_hat_ts[,i] = cbind(test_intercept, as.matrix(test[,-i])) %*% ginv(t(cbind(train_intercept, as.matrix(train[,-i]))) %*% cbind(train_intercept, as.matrix(train[,-i])))%*% t(cbind(train_intercept, as.matrix(train[,-i]))) %*% as.matrix(train[,i])
}
# residual mat
residual_tr_mat = train - y_hat_tr
residual_ts_mat = test-y_hat_ts
ret = list(residual_tr = residual_tr_mat, residual_ts = residual_ts_mat)
return(ret)
}
plot(ret$residual_ts[,2])
plot(ret$residual_ts[,3])
plot(ret$residual_ts[,4])
plot(ret$residual_ts[,1])
source("C:/Users/User/github/Rstudio/Project/TFT_SOM.R", encoding = 'UTF-8', echo=TRUE)
residual
setwd('C:\\Users\\User\\github\\Rstudio\\Project\\Normality_test')
nrow(df_tr)
shapiro.test(df_tr[,1])
qqnorm(df_tr[,15])
qqline(df_tr[,15])
= function(data){
for (i in 1:ncol(data)) {
png(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i])
qqline(df_tr[,i])
dev.off()
}
}
normality = function(data){
for (i in 1:ncol(data)) {
png(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i])
qqline(df_tr[,i])
dev.off()
}
}
normality(df_tr)
setwd('C:\\Users\\User\\github\\Rstudio\\Project\\Normality_test')
normality = function(data){
for (i in 1:ncol(data)) {
png(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i])
qqline(df_tr[,i])
dev.off()
}
}
normality(df_tr)
title(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i])
qqline(df_tr[,i])
title(paste0("sensor ",colnames(data)[i],"normality test.png"))
png(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i])
qqline(df_tr[,i])
qqnorm(df_tr[,i])
qqline(df_tr[,i])
title(paste0("sensor ",colnames(data)[i],"normality test.png"))
qqnorm(df_tr$MP_ALLSTEP.INNER_TEMP.Mean)
qqline(df_tr$MP_ALLSTEP.INNER_TEMP.Mean)
title(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr$MP_ALLSTEP.INNER_TEMP.Mean)
setwd('C:\\Users\\User\\github\\Rstudio\\Project\\Normality_test')
png(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i])
qqline(df_tr[,i])
title(paste0("sensor ",colnames(data)[i],"normality test.png"))
dev.off()
qqnorm(df_tr$MP_ALLSTEP.INNER_TEMP.Mean)
qqline(df_tr$MP_ALLSTEP.INNER_TEMP.Mean)
title(paste0("sensor ",colnames(data)[i],"normality test.png"))
normality = function(data){
for (i in 1:ncol(data)) {
png(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i])
qqline(df_tr[,i])
title(paste0("sensor ",colnames(data)[i],"normality test.png"))
dev.off()
}
}
normality(df_tr)
qqnorm(df_tr[,i])
qqline(df_tr[,i])
}
normality = function(data){
for (i in 1:ncol(data)) {
png(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i], main =paste0("sensor ",colnames(data)[i],"normality test"))
qqline(df_tr[,i])
dev.off()
}
}
normality(df_tr)
normality = function(data){
for (i in 1:ncol(data)) {
png(paste0("sensor ",colnames(data)[i],"normality test.png"))
shapiro.test(df_tr[,i])
qqnorm(df_tr[,i], main =paste0("sensor ",colnames(data)[i]," normality test"))
qqline(df_tr[,i])
dev.off()
}
}
normality(df_tr)
