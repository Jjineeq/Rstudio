fit2$residual_ts
# pca 한거(pc1, pc2) 양측 검증 / 하긴했는데 무슨 의미인지 모르겠음..
fit2 = mset_regress(as.matrix(pc3$x[,1]), as.matrix(pc3$x[,1]))
# pca 한거(pc1, pc2) 양측 검증 / 하긴했는데 무슨 의미인지 모르겠음..
fit2 = mset_regress(as.matrix(pc2$x[,1]), as.matrix(pc2$x[,1]))
fit2$residual_tr
fit2$residual_ts
plot(fit2$residual_ts, col = 'blue', type = 'o')
ucl2 = bootlimit(fit2$residual_tr, 0.1, 100)
lcl2 = bootlimit(fit2$residual_tr, 0.9, 100)
abline(h = c(ucl2, lcl2), col = 'red')
plot(fit2$residual_ts, col = 'blue')
abline(h = c(ucl2, lcl2), col = 'red')
summary(pc)
# pca 한거(pc1, pc2) 양측 검증 / 하긴했는데 무슨 의미인지 모르겠음..
fit2 = mset_regress(as.matrix(pc$x[,1]), as.matrix(pc$x[,1]))
pc$scores
# pca 한거(pc1, pc2) 양측 검증 / 하긴했는데 무슨 의미인지 모르겠음..
fit2 = mset_regress(as.matrix(pc$scores[,1]), as.matrix(pc$scores[,1]))
fit2$residual_tr
fit2$residual_ts
plot(fit2$residual_ts, col = 'blue')
ucl2 = bootlimit(fit2$residual_tr, 0.1, 100)
lcl2 = bootlimit(fit2$residual_tr, 0.9, 100)
abline(h = c(ucl2, lcl2), col = 'red')
summary(pc)
x <- pc2$x[,1]
y <- pc2$x[,2]
z <- pc2$x[,3]
plot3d(x,y,z, col = rainbow(1000))
plot(x,y)
pc2$x[,1]
type(pc2$x[,1])
typeof(pc2$x[,1])
q = matrix(c(pc2$x[,1], pc2$x[,2],pc2$x[,3]))
q
q = list(x,y,z)
q_mat <- matrix(unlist(q), ncol =3)
q_mat
df[,:1]
df[,1:]
df[,1]
q = list(o,x,y,z)
o = df[,1]
q = list(o,x,y,z)
q_mat <- matrix(unlist(q), ncol =4)
qq = rbind()
plot3d(x,y,z, col = o) # pca해서 3차원 표현
plot3d(x,y,z, col = 'rainbow') # pca해서 3차원 표현
q_mat[,1]
plot3d(x,y,z, col = q_mat[,1]
) # pca해서 3차원 표현
polt(x,y)
plot(x,y)
plot3d(x,y,z, col = as.integer(q_mat[,1])) # pca해서 3차원 표현plot(x,y)
rbind(x,y)
cbind(x,y)
df[,1]
cbind(df[,1], df_test)
df_test = cbind(df[,1], df_test) # PCA set
cor(df_test) # 상관관계
pc=princomp(df_test)
pc$scores # 줄인 차원에서는 data가 어떻게 생겼는가? 주성분으로 나타냄
pc=princomp(df_test)
df = read.csv("C:/Users/user/github/Anomaly-Detection/data/ph1.csv", fileEncoding = 'CP949') # train
df2 = read.csv("C:/Users/user/github/Anomaly-Detection/data/ph2.csv", fileEncoding = 'CP949') # normal test
df3 = read.csv("C:/Users/user/github/Anomaly-Detection/data/ph2_out.csv", fileEncoding = 'CP949') # abnormal test
df_tr = df[,8:49] # 필요 정보만 select
df_te = df2[,8:49] # 필요 정보만 select
df_te_2 = df3[,8:49] # 필요 정보만 select
te = rbind(df_te, df_te_2)
df_test = df[,8:49] # PCA set
df_test2 = df[,8:49] # Normalization PCA set
df_test5 = cbind(df[,1], df_test)
df_test5
read.table(df_test5, header = TRUE)
read.table(df_test5)
q_mat
plot3d(x,y,z, col = as.integer(q_mat[,1])) # pca해서 3차원 표현plot(x,y)
plot3d(q_mat, col = df_tr5) # pca해서 3차원 표현plot(x,y)
plot3d(x,y,z, col = df_tr5) # pca해서 3차원 표현plot(x,y)
plot3d(x,y,z, col = df_test5) # pca해서 3차원 표현plot(x,y)
plot3d(x,y,z, col = df_test5$`df[, 1]`) # pca해서 3차원 표현plot(x,y)
cols = c('blue', 'red','skyblue','green')
plot3d(x,y,z, pch = 16, col = cols[as.numeric(df_test5$`df[, 1]`)])
df_test5$`df[, 1]`
plot3d(x,y,z, pch = 16, col = cols[as.numeric(df_test5$df[, 1])])
df_test5$df[, 1]
plot3d(x,y,z, pch = 16, col = cols[as.numeric(df_test5$`df[, 1]`)])
with(df_test5, scatterplot3d(x,y,z, pch = 16, col = cols[as.numeric(df_test5$`df[, 1]`)]))
with(df_test5, plot3d(x,y,z, pch = 16, col = cols[as.numeric(df_test5$`df[, 1]`)]))
g = ggbiplot(pc2, choices = c(1,2,3), obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE )
g = ggbiplot(pc2, choices = c(1,2), obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE )
g = g + scale_color_discrete(name="")
g = g + theme(legend.direction = 'horizontal', legend.position = 'top')
g
q_mat
typeof(q_mat)
q_mat = as.matrix.data.frame(q_mat)
typeof(q_mat)
q_mat = as.data.frame(q_mat)
typeof(q_mat)
q_mat$V1
with(q_mat, plot3d(x,y,z, pch = 16, col = cols[as.numeric(q_mat$V1)]))
plot3d(q_mat)
plot3d(q_mat[,1],q_mat[,3],q_mat[,2])
plot3d(q_mat[,2],q_mat[,3],q_mat[,4])
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.numeric(q_mat$V1)])
cols[as.numeric(q_mat$V1)]
cols[as.factor(q_mat$V1)]
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)])
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)])
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
)
legned3D('topright', legend = paste('Tool', c('1','2','3','4')))
legend3D('topright', legend = paste('Tool', c('1','2','3','4')))
legend3d('topright', legend = paste('Tool', c('1','2','3','4')))
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
)
legend3d('topright', legend = paste('Tool', c('1','2','3','4')))
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
)
legend('topright', legend = paste('Tool', c('1','2','3','4')))
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
legend('topright', legend = paste('Tool', c('1','2','3','4')))
)
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
legend3d('topright', legend = paste('Tool', c('1','2','3','4')))
)
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
legend3d('topright', legend = paste('Tool', c('1','2','3','4')),)
)
plot3d(q_mat[,2],q_mat[,3],q_mat[,4], col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
legend3d('topright', legend = paste('Tool', c('1','2','3','4'))),
)
plot3d(q_mat[,2],q_mat[,3],q_mat[,4],
col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
)
legend3d('topright', legend = paste('Tool', c('1','2','3','4')))
legend('topright', legend = paste('Tool', c('1','2','3','4')))
plot3d(q_mat[,2],q_mat[,3],q_mat[,4],
col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
)
legend('topright', legend = paste('Tool', c('1','2','3','4')))
pc2$x[,1]
pc2$x[,1]
g = plot_ly(x = pc2$x[,1], y = pc2$x[,2], z = pc2$x[,3], type = "scatter3d", mode = 'markers' )
library(plotly)
g = plot_ly(x = pc2$x[,1], y = pc2$x[,2], z = pc2$x[,3], type = "scatter3d", mode = 'markers' )
g
color = cols[as.numeric(q_mat$V1))
g1 = plot_ly(x = pc2$x[,1], y = pc2$x[,2], z = pc2$x[,3],
type = "scatter3d",
mode = 'markers' ,
color = cols[as.numeric(q_mat$V1)] )
g1 = plot_ly(x = pc2$x[,1], y = pc2$x[,2], z = pc2$x[,3],
type = "scatter3d",
mode = 'markers' ,
color = cols[as.factor(q_mat$V1)] )
cols = c('blue', 'red','skyblue','green')
plot3d(q_mat[,2],q_mat[,3],q_mat[,4],
col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
)
g1 = plot_ly(x = q_mat[,2], y = q_mat[,3], z = q_mat[,4],
type = "scatter3d",
mode = 'markers' ,
color = cols[as.factor(q_mat$V1)] )
g1
plot3d(q_mat[,2],q_mat[,3],q_mat[,4],
col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
)
plot(mat[,2:3], xlab = 'alpha error', ylab = 'beta error', main = '유의 수준에 따른 error') # hostelling t-square ginv 진행
source("C:/Users/User/github/Rstudio/Project/TFT_정리.R", encoding = 'UTF-8', echo=TRUE)
t
plot(mat[,2:3], xlab = 'alpha error', ylab = 'beta error', main = '유의 수준에 따른 error') # hostelling t-square ginv 진행
points(mat3[,2:3],col='blue',type='o') # hostelling t-square solve 진행
legend('topright', legend = c('t-square ginv','t-square solve'), fill =  c('black', 'blue'))
plot(mat[,2:3], xlab = 'alpha error', ylab = 'beta error', main = '유의 수준에 따른 error') # hostelling t-square ginv 진행
points(mat3[,2:3],col='blue',type='o') # hostelling t-square solve 진행
legend('topright', legend = c('t-square ginv','t-square solve'), fill =  c('black', 'blue'))
plot(mat[,2:3], xlab = 'alpha error', ylab = 'beta error', main = '유의 수준에 따른 error') # hostelling t-square ginv 진행
points(mat2[,2:3],col='green',type='o') # cbm ginv 진행
points(mat3[,2:3],col='blue',type='o') # hostelling t-square solve 진행
points(mat4[,2:3],col='red',type='o') # cbm solve 진행
legend('topright', legend = c('t-square ginv','cbm ginv','t-square solve','cbm solve'), fill =  c('black', 'green','blue','red'))
tft_cbm_solve = cbm_solve(df_tr, te, 0.05, 3)
# Hotelling T square 진행 -> 다변량 t 검정
# 집단간 차이가 없다고 가정 -> 다음에 확인해볼게요 / 무조건 귀무가설 채택되긴 할겁니다.
df_t2 = t_square(df_tr, te, 0.05)
# library 불러오기
library(corrplot)
library(MASS)
library(pracma)
library(autoencoder)
# Hotelling T square 진행 -> 다변량 t 검정
# 집단간 차이가 없다고 가정 -> 다음에 확인해볼게요 / 무조건 귀무가설 채택되긴 할겁니다.
df_t2 = t_square(df_tr, te, 0.05)
df_t2
source("C:/Users/User/github/Rstudio/Project/TFT_정리.R", encoding = 'UTF-8', echo=TRUE)
plot(df_t2_2$Tsq_mat, type = 'l', ylim = c(0,700), xlab = 'time', ylab = 'T-square')
plot(df_t2_2$Tsq_mat, type = 'l', ylim = c(0,700), xlab = 'time', ylab = 'T-square')
# 데이터 확인
plot(df_t2$Tsq_mat, type = 'o', ylim = c(0,600))
# t square으로 나온 limit plot
abline(h = c(df_t2$CL), col = 'red')
df_t2_2 = t_square(df_tr, tk, 0.05)
plot(df_t2_2$Tsq_mat, type = 'l', ylim = c(0,700), xlab = 'time', ylab = 'T-square')
# 시각화
plot(mat[,2:3], xlab = 'alpha error', ylab = 'beta error', )
plot(df_t2_2$Tsq_mat, type = 'l', ylim = c(0,700), xlab = 'time', ylab = 'T-square')
# t square으로 나온 limit plot
abline(h = c(df_t2$CL), col = 'red')
df_t2 = t_square(df_tr, df_tr, 0.05)
# 데이터 확인
plot(df_t2$Tsq_mat, type = 'o', ylim = c(0,600))
# Hotelling T square 진행 -> 다변량 t 검정
# 집단간 차이가 없다고 가정 -> 다음에 확인해볼게요 / 무조건 귀무가설 채택되긴 할겁니다.
df_t2 = t_square(df_tr, te, 0.05)
# 데이터 확인
plot(df_t2$Tsq_mat, type = 'o', ylim = c(0,600))
# t square으로 나온 limit plot
abline(h = c(df_t2$CL), col = 'red')
df_t2 = t_square(df_tr, df_tr, 0.05)
plot(df_t2_2$Tsq_mat, type = 'l', ylim = c(0,700), xlab = 'time', ylab = 'T-square')
# t square으로 나온 limit plot
abline(h = c(df_t2$CL), col = 'red')
t_square
t2_solve = t_square_solve(df_tr, te, i/1000)
s1_solve = t_square_solve(df_tr, df_tr, i/1000)
plot(mat[,2:3], xlab = 'alpha error', ylab = 'beta error', main = '유의 수준에 따른 error') # hostelling t-square ginv 진행
points(mat2[,2:3],col='green',type='o') # cbm ginv 진행
points(mat3[,2:3],col='blue',type='o') # hostelling t-square solve 진행
points(mat4[,2:3],col='red',type='o') # cbm solve 진행
legend('topright', legend = c('t-square ginv','cbm ginv','t-square solve','cbm solve'), fill =  c('black', 'green','blue','red'))
abline(v=c(50),col='blue',lwd=3)
plot(ir_t2$Tsq_mat,type='o')
abline(h=c(ir_t2$CL),col='red')
abline(v=c(50),col='blue',lwd=3)
library(rgl)
library(ggbiplot)
library(ggplot2)
library(corrplot)
g
g1
library(plotly)
plot3d(q_mat[,2],q_mat[,3],q_mat[,4],
col = cols[as.factor(q_mat$V1)],
xlab = 'pc1',
ylab = 'pc2',
zlab = 'pc3',
)
q_mat$V1
g = ggbiplot(pc2, choices = c(1,2), obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE )
g = g + scale_color_discrete(name="")
g = g + theme(legend.direction = 'horizontal', legend.position = 'top')
g
k = ggbiplot(pc, choices = c(1,2), obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE )
k = k + scale_color_discrete(name="")
k = k + theme(legend.direction = 'horizontal', legend.position = 'top')
k
plot(x,y) # pca해서 2차원 표현
= df[,8:49] # 필요 정보만 select
df_tr= df[,8:49] # 필요 정보만 select
df_tr = df[,8:49] # 필요 정보만 select
df_te = df2[,8:49] # 필요 정보만 select
df_te_2 = df3[,8:49] # 필요 정보만 select
te = rbind(df_te, df_te_2)
df_test = df[,8:49] # PCA set
df_test2 = df[,8:49] # Normalization PCA set
df_test = df[,8:49] # PCA set
cor(df_test) # 상관관계
corrplot(cor(df_test))
library(corrplot)
corrplot(cor(df_test))
corrplot.mixed(cor(df_test), upper = 'shade')
corrplot(cor(ir))
corrplot(cor(df_test))
corrplot(cor(df_test), labels = c(1,2,3))
cor(df_test) # 상관관계
corrplot.mixed(cor(df_test), upper = 'shade')
corrplot(cor(df_test), labels = c(1:41))
corrplot(cor(df_test), cl.pos = 'n', tl.pos = 'n')
corrplot(cor(df_test),order = 'AOE' cl.pos = 'n', tl.pos = 'n')
corrplot(cor(df_test),order = 'AOE', cl.pos = 'n', tl.pos = 'n')
corrplot.mixed(cor(df_test),order = 'AOE', cl.pos = 'n', tl.pos = 'n')
corrplot.mixed(cor(df_test), cl.pos = 'n', tl.pos = 'n')
##
cor.mtest <- function(mat, conf.level = 0.95) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
diag(lowCI.mat) <- diag(uppCI.mat) <- 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], conf.level = conf.level)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
lowCI.mat[i, j] <- lowCI.mat[j, i] <- tmp$conf.int[1]
uppCI.mat[i, j] <- uppCI.mat[j, i] <- tmp$conf.int[2]
}
}
return(list(p.mat, lowCI.mat, uppCI.mat))
}
res1 <- cor.mtest(df_test, 0.95)
res1
res2 <- cor.mtest(df_test, 0.99)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(M, p.mat = res1[[1]], sig.level = 0.2)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(df_test, p.mat = res1[[1]], sig.level = 0.2)
res1[[1]]
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(df_test, p.mat = res1[[1]], sig.level = 0.2)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(df_test, p.mat = res1[[1]], sig.level = 0.5)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(df_test, p.mat = res1[[1]], sig.level = 0.05)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(cov(df_test), p.mat = res1[[1]], sig.level = 0.05)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.05)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.05, cl.pos = 'n', tl.pos = 'n' )
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.2, cl.pos = 'n', tl.pos = 'n' )
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.2, cl.pos = 'n' )
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.2 )
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
plot.new()
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.2 )
dev.off()
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
png(paste0("TFT cor plot.png"))
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.2 )
res1[[1]]
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
png(paste0("TFT cor plot.png"))
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.2 )
dev.off()
corrplot(cor(df_test), p.mat = res1[[1]], sig.level = 0.2 )
res1 <- cor.mtest(df_test, 0.95)
res2 <- cor.mtest(df_test, 0.99)
res1
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
cor_test_mat = coor.test(df_test)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
cor_test_mat = corr.test(df_test)
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
library('pshch')
## 유의수준에 따라 유의하지 않은 경우 X 표시하기
install.packages('psych')
library(pshch)
library(psych)
cor_test_mat = corr.test(df_test)
corrplot(cor(df_test), p.mat = cor_test_mat, sig.level = 0.2 )
corr.test(df_test)
cor_test_mat = corr.test(df_test)$p
cor_test_mat
corrplot(cor(df_test), p.mat = cor_test_mat, sig.level = 0.2 )
corrplot(cor(df_test), p.mat = cor_test_mat, insig = 'p-value' )
dev.off()
corrplot(cor(df_test), p.mat = cor_test_mat, cl.pos = 'n', tl.pos = 'n' )
dev.off()
png(paste0("TFT cor plot.png"))
corrplot(cor(df_test), p.mat = cor_test_mat, cl.pos = 'n', tl.pos = 'n' )
dev.off()
png(paste0("TFT cor plot_1.png"))
corrplot(cor(df_test), cl.pos = 'n', tl.pos = 'n' )
dev.off()
#png(paste0("TFT cor plot_1.png"))
corrplot(cor(df_test), p.mat = cor_test_mat, cl.pos = 'n', tl.pos = 'n' )
corrplot(cor(df_test), cl.pos = 'n', tl.pos = 'n' )
corrplot(cor(df_test), cl.pos = 1:41, tl.pos = 'n' )
corrplot(cor(df_test), cl.pos = 'a', tl.pos = 'n' )
corrplot(cor(df_test), cl.pos = 'n', tl.pos = 'n' )
corrplot(cor(df_test),method = 'number', cl.pos = 'n', tl.pos = 'n' )
te[,1]
nrow(df_tr)
ncol(df_tr)
df_tr[,1]
colnames(df_tr)
colnames(df_tr)[1]
setwd('C:\\Users\\User\\github\\Rstudio\\Project')
for (i in 1:42) {
train = df_tr[,i]
test = te[,i]
msetLR = mset_regress(train, test)
trDegradation = degradation_model(msetLR$residual_tr)
tsDegradation = degradation_model(msetLR$residual_ts)
png(paste0("sensor ",colnames(df_tr)[i],".png"))
plot(tsDegradation)
dev.off()
}
for (i in 1:42) {
train = as.matrix(df_tr[,i])
test = as.matrix(te[,i])
msetLR = mset_regress(train, test)
trDegradation = degradation_model(msetLR$residual_tr)
tsDegradation = degradation_model(msetLR$residual_ts)
png(paste0("sensor ",colnames(df_tr)[i],".png"))
plot(tsDegradation)
dev.off()
}
library(pracma)
for (i in 1:42) {
train = as.matrix(df_tr[,i])
test = as.matrix(te[,i])
msetLR = mset_regress(train, test)
trDegradation = degradation_model(msetLR$residual_tr)
tsDegradation = degradation_model(msetLR$residual_ts)
png(paste0("sensor ",colnames(df_tr)[i],".png"))
plot(tsDegradation)
dev.off()
}
library(MASS)
for (i in 1:42) {
train = as.matrix(df_tr[,i])
test = as.matrix(te[,i])
msetLR = mset_regress(train, test)
trDegradation = degradation_model(msetLR$residual_tr)
tsDegradation = degradation_model(msetLR$residual_ts)
png(paste0("sensor ",colnames(df_tr)[i],".png"))
plot(tsDegradation)
dev.off()
}
degradation_model = function(residual){
Comment = "
@Description
Degradation Factor
Degradation Factor is used to transformed Anomaly scores and applied to predict Remaining Useful Lifecycle
@Param
anomalyScore : anomalyScore
@Return
degradation statistics
"
residual = as.matrix(residual)
# residual euclidean norm
residual_ed_norm = matrix(0, nrow(residual), ncol(residual))
for(i in 1:ncol(residual)){
residual_ed_norm[,i] =  sqrt(residual[,i]^2)
}
# accumulated degradation model
accum_degradation = matrix(0, nrow(residual), ncol(residual))
for(i in 1:ncol(residual)){
accum_degradation[,i] =  cumsum(residual_ed_norm[,i])
}
# degradation model
n = 1:nrow(residual)
degradation = matrix(0, nrow(residual), ncol(residual))
for(i in 1:ncol(residual)){
degradation[,i] =  cumsum(residual_ed_norm[,i])/n
}
return(degradation)
}
for (i in 1:42) {
train = as.matrix(df_tr[,i])
test = as.matrix(te[,i])
msetLR = mset_regress(train, test)
trDegradation = degradation_model(msetLR$residual_tr)
tsDegradation = degradation_model(msetLR$residual_ts)
png(paste0("sensor ",colnames(df_tr)[i],".png"))
plot(tsDegradation)
dev.off()
}
te
all = rbind(df_tr, te)
all
for (i in 1:42) {
train = as.matrix(df_tr[,i])
test = as.matrix(all[,i])
msetLR = mset_regress(train, test)
trDegradation = degradation_model(msetLR$residual_tr)
tsDegradation = degradation_model(msetLR$residual_ts)
png(paste0("sensor ",colnames(df_tr)[i]," all.png"))
plot(tsDegradation)
dev.off()
}
